{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Zood","text":"<p>Zood is a Lua library for ComputerCraft that provides a powerful and flexible way to validate and transform data structures. Inspired by Zod for TypeScript, Zood brings type safety and schema validation to Lua, making it easier to handle complex data in your ComputerCraft programs.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Type Validation: Ensure data matches expected types (e.g., strings, numbers, tables).</li> <li>Custom Validators: Add custom validation logic to suit your needs.</li> <li>Data Transformation: Transform data as it is validated (e.g., trim strings, convert case).</li> <li>Error Handling: Detailed error messages for debugging and validation failures.</li> <li>Schema Composition: Combine schemas to create complex validation rules.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To use Zood in your ComputerCraft programs, download the <code>z.lua</code> file and include it in your project:</p> <pre><code>os.loadAPI(\"z.lua\")\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Here\u2019s a quick example of how to use Zood to validate a table:</p> <pre><code>local z = require(\"z\")\n\n-- Define a schema\nlocal schema = z.table({\n  name = z.string(),\n  age = z.number():positive(),\n  email = z.string():email()\n})\n\n-- Data to validate\nlocal data = {\n  name = \"Alice\",\n  age = 30,\n  email = \"alice@example.com\"\n}\n\n-- Validate the data\nlocal success, result = schema:safeParse(data)\n\nif success then\n  print(\"Data is valid!\")\nelse\n  print(\"Validation errors:\")\n  for _, err in ipairs(result) do\n    print(err)\n  end\nend\n</code></pre>"},{"location":"#why-use-zood","title":"Why Use Zood?","text":"<ul> <li>Type Safety: Ensure your data adheres to expected formats and structures.</li> <li>Readable Code: Define schemas in a clean and declarative way.</li> <li>Error Handling: Get detailed error messages when validation fails.</li> <li>Extensibility: Add custom validators and transformations to fit your use case.</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Getting Started: Learn how to install and use Zood.</li> <li>API Reference: Explore the full API and available methods.</li> <li>Examples: See practical examples of Zood in action.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! If you\u2019d like to contribute to Zood, please read our Contributing Guide.</p>"},{"location":"#license","title":"License","text":"<p>Zood is licensed under the MIT License. See the LICENSE file for more details.</p>"},{"location":"api-reference/","title":"API Reference","text":""},{"location":"api-reference/#baseschema","title":"BaseSchema","text":""},{"location":"api-reference/#baseschemanewtype-fields-optional-default-validate-transform-error","title":"<code>BaseSchema.new(type, fields, optional, default, validate, transform, error)</code>","text":"<p>Creates a new schema instance.</p> <ul> <li>type: The type of the schema (e.g., \"string\", \"number\").</li> <li>fields: A table of fields that the schema will have.</li> <li>optional: If the schema is optional.</li> <li>default: The default value of the schema.</li> <li>validate: A function that validates the schema.</li> <li>transform: A function that transforms the schema.</li> <li>error: The error message that will be thrown if the schema is invalid.</li> </ul>"},{"location":"api-reference/#baseschemaparsedata","title":"<code>BaseSchema:parse(data)</code>","text":"<p>Parses data and throws an error if invalid.</p> <ul> <li>data: The data to parse.</li> <li>returns: The parsed data.</li> </ul>"},{"location":"api-reference/#baseschemasafeparsedata","title":"<code>BaseSchema:safeParse(data)</code>","text":"<p>Parses data without throwing an error.</p> <ul> <li>data: The data to parse.</li> <li>returns: A boolean indicating success, and a table of errors if unsuccessful.</li> </ul>"},{"location":"api-reference/#baseschemanullable","title":"<code>BaseSchema:nullable()</code>","text":"<p>Marks the schema as optional.</p> <ul> <li>returns: The schema instance for chaining.</li> </ul>"},{"location":"api-reference/#baseschemadefaultvalue","title":"<code>BaseSchema:default(value)</code>","text":"<p>Sets a default value for the schema.</p> <ul> <li>value: The default value.</li> <li>returns: The schema instance for chaining.</li> </ul>"},{"location":"api-reference/#baseschemavalidatefunc","title":"<code>BaseSchema:validate(func)</code>","text":"<p>Sets a custom validation function.</p> <ul> <li>func: The validation function.</li> <li>returns: The schema instance for chaining.</li> </ul>"},{"location":"api-reference/#baseschemaerrormessage","title":"<code>BaseSchema:error(message)</code>","text":"<p>Sets a custom error message.</p> <ul> <li>message: The error message.</li> <li>returns: The schema instance for chaining.</li> </ul>"},{"location":"api-reference/#primitive-schemas","title":"Primitive Schemas","text":""},{"location":"api-reference/#zstringprops","title":"<code>Z.string(props)</code>","text":"<p>Creates a string schema.</p> <ul> <li>props: Additional properties for the schema.</li> <li>returns: The schema instance for chaining.</li> </ul>"},{"location":"api-reference/#znumberprops","title":"<code>Z.number(props)</code>","text":"<p>Creates a number schema.</p> <ul> <li>props: Additional properties for the schema.</li> <li>returns: The schema instance for chaining.</li> </ul>"},{"location":"api-reference/#zbooleanprops","title":"<code>Z.boolean(props)</code>","text":"<p>Creates a boolean schema.</p> <ul> <li>props: Additional properties for the schema.</li> <li>returns: The schema instance for chaining.</li> </ul>"},{"location":"api-reference/#compound-schemas","title":"Compound Schemas","text":""},{"location":"api-reference/#ztablefields-props","title":"<code>Z.table(fields, props)</code>","text":"<p>Creates a table schema.</p> <ul> <li>fields: A table of fields for the schema.</li> <li>props: Additional properties for the schema.</li> <li>returns: The schema instance for chaining.</li> </ul>"},{"location":"api-reference/#zarrayelementschema-props","title":"<code>Z.array(elementSchema, props)</code>","text":"<p>Creates an array schema.</p> <ul> <li>elementSchema: The schema for the array elements.</li> <li>props: Additional properties for the schema.</li> <li>returns: The schema instance for chaining.</li> </ul>"},{"location":"api-reference/#complex-schemas","title":"Complex Schemas","text":""},{"location":"api-reference/#zunionschemas-props","title":"<code>Z.union(schemas, props)</code>","text":"<p>Creates a union schema.</p> <ul> <li>schemas: A table of schemas to union.</li> <li>props: Additional properties for the schema.</li> <li>returns: The schema instance for chaining.</li> </ul>"},{"location":"api-reference/#helper-functions","title":"Helper Functions","text":"<p>Zood provides a variety of helper functions to add constraints and transformations to your schemas. These functions can be chained together to create complex validation rules.</p> <p>All helper functions return the schema instance for chaining. Here are some examples of how to use them:</p> <pre><code>-- A string that is trimmed, lowercase, between 5 and 20 characters, with a default value of \"hello\"\nlocal schema = Z.string():trim():lower():min(5):max(20):default(\"hello\")\n</code></pre> <p>All helper functions take an optional <code>props</code> argument, which can be used to specify custom error messages. For example:</p> <pre><code>-- A custom error message\nlocal schema = Z.string():min(5, { message = \"String must be at least 5 characters long\" })\n-- %s will be replaced with the actual value\nlocal schema = Z.string():min(5, { message = \"String must be at least 5 characters long, recieved %s.\" })\n-- A function that returns the error message\nlocal schema = Z.string():min(5, { message = function(value) return \"String must be at least 5 characters long, recieved \" .. value end })\n</code></pre>"},{"location":"api-reference/#minvalue-props","title":"<code>:min(value, props)</code>","text":"<p>Sets a minimum value or length for the schema.</p> <ul> <li><code>value</code>: The minimum value (for numbers) or length (for strings/arrays).</li> <li><code>props</code>: Optional properties, such as a custom error message.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.number():min(10) -- Number must be at least 10\nlocal schema = Z.string():min(5)  -- String must be at least 5 characters long\n</code></pre>"},{"location":"api-reference/#maxvalue-props","title":"<code>:max(value, props)</code>","text":"<p>Sets a maximum value or length for the schema.</p> <ul> <li><code>value</code>: The maximum value (for numbers) or length (for strings/arrays).</li> <li><code>props</code>: Optional properties, such as a custom error message.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.number():max(100) -- Number must be at most 100\nlocal schema = Z.string():max(20)  -- String must be at most 20 characters long\n</code></pre>"},{"location":"api-reference/#lengthvalue-props","title":"<code>:length(value, props)</code>","text":"<p>Sets an exact length for the schema.</p> <ul> <li><code>value</code>: The exact length (for strings/arrays).</li> <li><code>props</code>: Optional properties, such as a custom error message.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.string():length(10) -- String must be exactly 10 characters long\n</code></pre>"},{"location":"api-reference/#emailprops","title":"<code>:email(props)</code>","text":"<p>Validates that a string is a valid email address.</p> <ul> <li><code>props</code>: Optional properties, such as a custom error message.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.string():email() -- Must be a valid email address\n</code></pre>"},{"location":"api-reference/#urlprops","title":"<code>:url(props)</code>","text":"<p>Validates that a string is a valid URL.</p> <ul> <li><code>props</code>: Optional properties, such as a custom error message.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.string():url() -- Must be a valid URL\n</code></pre>"},{"location":"api-reference/#patternpattern-props","title":"<code>:pattern(pattern, props)</code>","text":"<p>Validates that a string matches a regex pattern.</p> <ul> <li><code>pattern</code>: The regex pattern to match.</li> <li><code>props</code>: Optional properties, such as a custom error message.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.string():pattern(\"^[A-Z]+$\") -- String must contain only uppercase letters\n</code></pre>"},{"location":"api-reference/#positiveprops","title":"<code>:positive(props)</code>","text":"<p>Validates that a number is positive.</p> <ul> <li><code>props</code>: Optional properties, such as a custom error message.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.number():positive() -- Number must be greater than 0\n</code></pre>"},{"location":"api-reference/#negativeprops","title":"<code>:negative(props)</code>","text":"<p>Validates that a number is negative.</p> <ul> <li><code>props</code>: Optional properties, such as a custom error message.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.number():negative() -- Number must be less than 0\n</code></pre>"},{"location":"api-reference/#betweenmin-max-props","title":"<code>:between(min, max, props)</code>","text":"<p>Validates that a number or string length is between two values.</p> <ul> <li><code>min</code>: The minimum value or length.</li> <li><code>max</code>: The maximum value or length.</li> <li><code>props</code>: Optional properties, such as a custom error message.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.number():between(10, 100) -- Number must be between 10 and 100\nlocal schema = Z.string():between(5, 20)  -- String length must be between 5 and 20\n</code></pre>"},{"location":"api-reference/#trimprops","title":"<code>:trim(props)</code>","text":"<p>Trims whitespace from a string.</p> <ul> <li><code>props</code>: Optional properties, such as a custom error message.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.string():trim() -- Trims leading and trailing whitespace\n</code></pre>"},{"location":"api-reference/#lowerprops","title":"<code>:lower(props)</code>","text":"<p>Converts a string to lowercase.</p> <ul> <li><code>props</code>: Optional properties, such as a custom error message.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.string():lower() -- Converts string to lowercase\n</code></pre>"},{"location":"api-reference/#upperprops","title":"<code>:upper(props)</code>","text":"<p>Converts a string to uppercase.</p> <ul> <li><code>props</code>: Optional properties, such as a custom error message.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.string():upper() -- Converts string to uppercase\n</code></pre>"},{"location":"api-reference/#enumvalues-props","title":"<code>:enum(values, props)</code>","text":"<p>Validates that a value is one of the specified values.</p> <ul> <li><code>values</code>: A table of allowed values.</li> <li><code>props</code>: Optional properties, such as a custom error message.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.string():enum({\"red\", \"green\", \"blue\"}) -- Value must be \"red\", \"green\", or \"blue\"\n</code></pre>"},{"location":"api-reference/#customfunc-props","title":"<code>:custom(func, props)</code>","text":"<p>Adds a custom validation function to the schema.</p> <ul> <li><code>func</code>: The custom validation function. It should return <code>true</code> if the data is valid, or <code>false</code> and an error message if invalid.</li> <li><code>props</code>: Optional properties, such as a custom error message.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.string():custom(function(data)\n  return data == \"secret\", \"Value must be 'secret'\"\nend)\n</code></pre>"},{"location":"api-reference/#nullable","title":"<code>:nullable()</code>","text":"<p>Marks the schema as optional. If the data is <code>nil</code>, it will be considered valid.</p> <ul> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.string():nullable() -- String is optional\n</code></pre>"},{"location":"api-reference/#defaultvalue","title":"<code>:default(value)</code>","text":"<p>Sets a default value for the schema. If the data is <code>nil</code>, the default value will be used.</p> <ul> <li><code>value</code>: The default value.</li> <li>Returns: The schema instance for chaining.</li> </ul> <p>Example:</p> <pre><code>local schema = Z.string():default(\"unknown\") -- Default value is \"unknown\"\n</code></pre>"},{"location":"api-reference/#extra-functions","title":"Extra Functions","text":""},{"location":"api-reference/#ztotableschema","title":"<code>Z.toTable(schema)</code>","text":"<p>Converts a schema to a table.</p> <ul> <li>schema: The schema to convert.</li> <li>returns: A table representation of the schema.</li> </ul>"},{"location":"api-reference/#ztojsonschema","title":"<code>Z.toJSON(schema)</code>","text":"<p>Converts a schema to a JSON string.</p> <ul> <li>schema: The schema to convert.</li> <li>returns: A JSON string representation of the schema.</li> </ul>"},{"location":"api-reference/#ztofileschema-name-type","title":"<code>Z.toFile(schema, name, type)</code>","text":"<p>Writes a schema to a file.</p> <ul> <li>schema: The schema to write.</li> <li>name: The name of the file.</li> <li>type: The file type (\"json\" or \"lua\").</li> </ul>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#real-world-examples","title":"Real-World Examples","text":"<p>Below are practical examples of how Zood can be used to validate and transform data in real-world scenarios.</p>"},{"location":"examples/#example-1-user-registration-form","title":"Example 1: User Registration Form","text":"<p>Validate a user registration form with fields for <code>name</code>, <code>email</code>, <code>age</code>, and <code>password</code>.</p> <pre><code>local Z = require(\"zood\")\n\nlocal userSchema = Z.table({\n  name = Z.string():min(3, { message = \"Name must be at least 3 characters\" }),\n  email = Z.string():email({ message = \"Invalid email address\" }),\n  age = Z.number():min(18, { message = \"You must be at least 18 years old\" }),\n  password = Z.string():min(8, { message = \"Password must be at least 8 characters\" })\n})\n\nlocal userData = {\n  name = \"Alice\",\n  email = \"alice@example.com\",\n  age = 25,\n  password = \"secure123\"\n}\n\nlocal success, result = userSchema:safeParse(userData)\n\nif success then\n  print(\"User is valid!\")\nelse\n  print(\"Validation errors:\")\n  for _, err in ipairs(result) do\n    print(err)\n  end\nend\n</code></pre>"},{"location":"examples/#example-2-configuration-file","title":"Example 2: Configuration File","text":"<p>Validate a configuration file with settings for <code>theme</code>, <code>notifications</code>, and <code>timeout</code>.</p> <pre><code>local Z = require(\"zood\")\n\nlocal configSchema = Z.table({\n  theme = Z.string():enum({\"light\", \"dark\"}, { message = \"Theme must be 'light' or 'dark'\" }),\n  notifications = Z.boolean(),\n  timeout = Z.number():min(1, { message = \"Timeout must be at least 1 second\" })\n})\n\nlocal configData = {\n  theme = \"dark\",\n  notifications = true,\n  timeout = 30\n}\n\nlocal success, result = configSchema:safeParse(configData)\n\nif success then\n  print(\"Configuration is valid!\")\nelse\n  print(\"Validation errors:\")\n  for _, err in ipairs(result) do\n    print(err)\n  end\nend\n</code></pre>"},{"location":"examples/#example-3-product-inventory","title":"Example 3: Product Inventory","text":"<p>Validate a product inventory with fields for <code>id</code>, <code>name</code>, <code>price</code>, and <code>tags</code>.</p> <pre><code>local Z = require(\"zood\")\n\nlocal productSchema = Z.table({\n  id = Z.string():length(10, { message = \"ID must be exactly 10 characters\" }),\n  name = Z.string():min(5, { message = \"Name must be at least 5 characters\" }),\n  price = Z.number():positive({ message = \"Price must be positive\" }),\n  tags = Z.array(Z.string())\n})\n\nlocal productData = {\n  id = \"1234567890\",\n  name = \"Wireless Mouse\",\n  price = 29.99,\n  tags = {\"electronics\", \"accessories\"}\n}\n\nlocal success, result = productSchema:safeParse(productData)\n\nif success then\n  print(\"Product is valid!\")\nelse\n  print(\"Validation errors:\")\n  for _, err in ipairs(result) do\n    print(err)\n  end\nend\n</code></pre>"},{"location":"examples/#example-4-api-response","title":"Example 4: API Response","text":"<p>Validate an API response containing a list of users.</p> <pre><code>local Z = require(\"zood\")\n\nlocal userSchema = Z.table({\n  id = Z.string(),\n  name = Z.string(),\n  email = Z.string():email()\n})\n\nlocal apiResponseSchema = Z.table({\n  status = Z.string():enum({\"success\", \"error\"}),\n  data = Z.array(userSchema)\n})\n\nlocal apiResponse = {\n  status = \"success\",\n  data = {\n    { id = \"1\", name = \"Alice\", email = \"alice@example.com\" },\n    { id = \"2\", name = \"Bob\", email = \"bob@example.com\" }\n  }\n}\n\nlocal success, result = apiResponseSchema:safeParse(apiResponse)\n\nif success then\n  print(\"API response is valid!\")\nelse\n  print(\"Validation errors:\")\n  for _, err in ipairs(result) do\n    print(err)\n  end\nend\n</code></pre>"},{"location":"examples/#example-5-survey-form","title":"Example 5: Survey Form","text":"<p>Validate a survey form with fields for <code>name</code>, <code>age</code>, <code>interests</code>, and <code>subscribe</code>.</p> <pre><code>local Z = require(\"zood\")\n\nlocal surveySchema = Z.table({\n  name = Z.string():min(3, { message = \"Name must be at least 3 characters\" }),\n  age = Z.number():min(18, { message = \"You must be at least 18 years old\" }),\n  interests = Z.array(Z.string()),\n  subscribe = Z.boolean()\n})\n\nlocal surveyData = {\n  name = \"Charlie\",\n  age = 22,\n  interests = {\"programming\", \"gaming\"},\n  subscribe = true\n}\n\nlocal success, result = surveySchema:safeParse(surveyData)\n\nif success then\n  print(\"Survey is valid!\")\nelse\n  print(\"Validation errors:\")\n  for _, err in ipairs(result) do\n    print(err)\n  end\nend\n</code></pre>"},{"location":"examples/#example-6-nested-configuration","title":"Example 6: Nested Configuration","text":"<p>Validate a nested configuration file with settings for <code>server</code>, <code>database</code>, and <code>logging</code>.</p> <pre><code>local Z = require(\"zood\")\n\nlocal configSchema = Z.table({\n  server = Z.table({\n    host = Z.string(),\n    port = Z.number():between(1, 65535, { message = \"Port must be between 1 and 65535\" })\n  }),\n  database = Z.table({\n    name = Z.string(),\n    user = Z.string(),\n    password = Z.string()\n  }),\n  logging = Z.table({\n    enabled = Z.boolean(),\n    level = Z.string():enum({\"debug\", \"info\", \"warn\", \"error\"})\n  })\n})\n\nlocal configData = {\n  server = {\n    host = \"localhost\",\n    port = 8080\n  },\n  database = {\n    name = \"mydb\",\n    user = \"admin\",\n    password = \"secret\"\n  },\n  logging = {\n    enabled = true,\n    level = \"info\"\n  }\n}\n\nlocal success, result = configSchema:safeParse(configData)\n\nif success then\n  print(\"Configuration is valid!\")\nelse\n  print(\"Validation errors:\")\n  for _, err in ipairs(result) do\n    print(err)\n  end\nend\n</code></pre>"},{"location":"examples/#example-7-e-commerce-order","title":"Example 7: E-Commerce Order","text":"<p>Validate an e-commerce order with fields for <code>orderId</code>, <code>items</code>, <code>total</code>, and <code>shippingAddress</code>.</p> <pre><code>local Z = require(\"zood\")\n\nlocal orderSchema = Z.table({\n  orderId = Z.string():length(10, { message = \"Order ID must be exactly 10 characters\" }),\n  items = Z.array(Z.table({\n    productId = Z.string(),\n    quantity = Z.number():positive({ message = \"Quantity must be positive\" })\n  })),\n  total = Z.number():positive({ message = \"Total must be positive\" }),\n  shippingAddress = Z.string():min(10, { message = \"Shipping address must be at least 10 characters\" })\n})\n\nlocal orderData = {\n  orderId = \"ORDER12345\",\n  items = {\n    { productId = \"PROD1\", quantity = 2 },\n    { productId = \"PROD2\", quantity = 1 }\n  },\n  total = 99.99,\n  shippingAddress = \"123 Main St, Springfield\"\n}\n\nlocal success, result = orderSchema:safeParse(orderData)\n\nif success then\n  print(\"Order is valid!\")\nelse\n  print(\"Validation errors:\")\n  for _, err in ipairs(result) do\n    print(err)\n  end\nend\n</code></pre>"},{"location":"getting-started/","title":"Getting Started with Zood","text":"<p>This guide will walk you through the process of installing Zood and using it in your ComputerCraft programs. By the end of this guide, you\u2019ll be able to define schemas, validate data, and handle errors with Zood.</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#step-1-download-zood","title":"Step 1: Download Zood","text":"<p>Download the <code>z.lua</code> file from the Zood GitHub repository and place it in your ComputerCraft program's directory.</p>"},{"location":"getting-started/#step-2-include-zood-in-your-program","title":"Step 2: Include Zood in Your Program","text":"<p>To use Zood in your program, load it using <code>os.loadAPI</code>:</p> <pre><code>os.loadAPI(\"z.lua\")\n</code></pre> <p>This will make the Zood library available in your program under the <code>Z</code> namespace.</p>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#step-1-define-a-schema","title":"Step 1: Define a Schema","text":"<p>A schema defines the structure and constraints of your data. Here\u2019s an example of a schema for a user profile:</p> <pre><code>local Z = require(\"z\")\n\nlocal userSchema = z.table({\n  name = z.string(),\n  age = z.number():positive(),\n  email = z.string():email()\n})\n</code></pre> <p>This schema ensures that:</p> <ul> <li><code>name</code> is a string.</li> <li><code>age</code> is a positive number.</li> <li><code>email</code> is a valid email address.</li> </ul>"},{"location":"getting-started/#step-2-validate-data","title":"Step 2: Validate Data","text":"<p>Once you\u2019ve defined a schema, you can use it to validate data. Here\u2019s an example:</p> <pre><code>local data = {\n  name = \"Alice\",\n  age = 30,\n  email = \"alice@example.com\"\n}\n\nlocal success, result = userSchema:safeParse(data)\n\nif success then\n  print(\"Data is valid!\")\nelse\n  print(\"Validation errors:\")\n  for _, err in ipairs(result) do\n    print(err)\n  end\nend\n</code></pre> <p>If the data is valid, <code>success</code> will be <code>true</code>, and <code>result</code> will contain the validated data. If the data is invalid, <code>success</code> will be <code>false</code>, and <code>result</code> will contain a list of error messages.</p>"},{"location":"getting-started/#advanced-usage","title":"Advanced Usage","text":""},{"location":"getting-started/#custom-validators","title":"Custom Validators","text":"<p>You can add custom validation logic to your schemas. For example, let\u2019s ensure that a string contains only uppercase letters:</p> <pre><code>local Z = require(\"z\")\n\nlocal uppercaseSchema = z.string():custom(function(data)\n  return data == string.upper(data), \"Value must be uppercase\"\nend)\n\nlocal data = \"HELLO\"\nlocal success, result = uppercaseSchema:safeParse(data)\n\nif success then\n  print(\"Data is valid!\")\nelse\n  print(\"Validation errors:\")\n  for _, err in ipairs(result) do\n    print(err)\n  end\nend\n</code></pre>"},{"location":"getting-started/#data-transformation","title":"Data Transformation","text":"<p>Zood allows you to transform data as it is validated. For example, you can trim whitespace from a string:</p> <pre><code>local Z = require(\"z\")\n\nlocal trimmedSchema = z.string():trim()\n\nlocal data = \"  Hello, World!  \"\nlocal success, result = trimmedSchema:safeParse(data)\n\nif success then\n  print(\"Transformed data:\", result) -- Output: \"Hello, World!\"\nelse\n  print(\"Validation errors:\")\n  for _, err in ipairs(result) do\n    print(err)\n  end\nend\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Reference to learn about all the available methods and features.</li> <li>Check out the Examples for more practical use cases of Zood.</li> </ul>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues while using Zood, please open an issue on GitHub. We\u2019ll be happy to help!</p>"}]}