local a={}local function b(c)if type(c)~="table"then return false end;local d=0;for e in pairs(c)do d=d+1;if c[d]==nil then return false end end;return true end;local function f(c)if type(c)~="table"then return c end;local g={}for h,i in pairs(c)do g[h]=i end;return g end;a._defaultMessages={type={string="Expected string, got %s",number="Expected number, got %s",boolean="Expected boolean, got %s",table="Expected table, got %s",["function"]="Expected function, got %s",userdata="Expected userdata, got %s",["nil"]="Expected nil, got %s",any="Invalid value, got %s"},required="Field %s is required",optional="Optional field %s is invalid",nullable="Field %s cannot be null",default="Failed to apply default value for %s",string={min="String must be at least %d characters",max="String must be at most %d characters",length="String must be exactly %d characters",pattern="String must match pattern: %s",email="Invalid email address format",url="Invalid URL format",domain="Invalid domain name",ip="Invalid IP address",uuid="Invalid UUID format",trim="Failed to trim string",lower="Failed to convert to lowercase",upper="Failed to convert to uppercase",contains="String must contain: %s",startsWith="String must start with: %s",endsWith="String must end with: %s",datetime="Invalid datetime format",date="Invalid date format",time="Invalid time format"},number={min="Number must be at least %d",max="Number must be at most %d",positive="Number must be positive",negative="Number must be negative",integer="Number must be an integer",finite="Number must be finite",between="Number must be between %d and %d",multipleOf="Number must be a multiple of %d",gt="Number must be greater than %d",gte="Number must be greater than or equal to %d",lt="Number must be less than %d",lte="Number must be less than or equal to %d",nonnegative="Number must be non-negative",nonpositive="Number must be non-positive"},table={invalid="Invalid table structure",unknownKey="Unknown key: %s",missingKey="Missing required key: %s",invalidKey="Invalid key: %s",strict="Unexpected field: %s",pick="Failed to pick fields: %s",omit="Failed to omit fields: %s",partial="Failed to make fields partial",required="Failed to make fields required",extend="Failed to extend schema",shape="Invalid table shape",minFields="Table must have at least %d fields",maxFields="Table must have at most %d fields",exactFields="Table must have exactly %d fields"},array={min="Array must contain at least %d items",max="Array must contain at most %d items",length="Array must contain exactly %d items",unique="Array items must be unique",element="Invalid array element at index %d",type="Expected array, got %s"},enum={invalid="Invalid enum value. Expected one of: %s",mismatch="Value does not match any enum option",type="Expected enum value, got %s"},union={invalid="Value does not match any union type",discriminator="Invalid discriminator value: %s",type="Expected union value, got %s"},coerce={string="Failed to coerce value to string: %s",number="Failed to coerce value to number: %s",boolean="Failed to coerce value to boolean: %s",date="Failed to coerce value to date: %s",invalid="Invalid value for coercion: %s"},peripheral={notFound="Peripheral not found: %s",wrongType="Wrong peripheral type. Expected %s, got %s",invalid="Invalid peripheral",missing="No peripheral attached to %s",unavailable="Peripheral is unavailable"},color={invalid="Invalid color value: %s",outOfRange="Color value out of range",type="Expected color value, got %s"},side={invalid="Invalid side value: %s",type="Expected side value, got %s"},custom={default="Custom validation failed",invalid="Invalid value: %s",error="Validation error: %s"},transform={failed="Failed to transform value",invalid="Invalid transformation result",error="Transform error: %s"},validation={failed="Validation failed",invalid="Invalid value",type="Type validation failed",constraint="Constraint validation failed",custom="Custom validation failed"},format={path="Error at path: %s",value="Invalid value: %s",type="Type mismatch at %s",multiple="Multiple validation errors occurred"}}a._patterns={email="^[%w%.%%%-_]+@[%w%%%-_]+%.[%a]+$",url="^https?://%w+%.[%w%.]+%w+$",domain="^%w+%.[%w%.]+%w+$",ip="^%d+%.%d+%.%d+%.%d+$",uuid="^[%w%-]+$",datetime="^%d{4}%-%d{2}%-%d{2}T%d{2}%:%d{2}%:%d{2}%.[%d%w]+Z$",date="^%d{4}%-%d{2}%-%d{2}$",time="^%d{2}%:%d{2}%:%d{2}%.[%d%w]+Z$"}local function j(k,l)if type(k)~="string"then return tostring(k)or"[Zood] Unknown error"end;l=l or{}local m={}if type(l.path)=="table"then for e,i in ipairs(l.path)do if type(i)=="string"or type(i)=="number"then m[#m+1]=tostring(i)end end end;local n=(type(l.value)=="table"or type(l.value)=="string")and#l.value or 0;local o={["%%s"]=tostring(l.value),["%%d"]=type(l.value)=="number"and tostring(math.floor(l.value))or"0",["%%f"]=type(l.value)=="number"and tostring(l.value)or"0",["%%type"]=type(l.value),["%%path"]=table.concat(m,"."),["%%expected"]=tostring(l.expected),["%%received"]=tostring(l.received),["%%arg"]=tostring(l.arg),["%%key"]=tostring(l.key),["%%index"]=tostring(l.index),["%%length"]=tostring(n),["%%code"]=tostring(l.code),["%%rule"]=tostring(l.rule),["%%schema"]=tostring(l.schemaType)}for p,q in pairs(o)do k=k:gsub(p,q)end;return k end;local function r(s,l)if not s or not l then return nil end;if l.schemaType then local t=s[l.schemaType]if type(t)=="table"then if l.rule and t[l.rule]then return t[l.rule]end;if l.code and t[l.code]then return t[l.code]end;return t end end;return s[l.code]or s[l.type]or s[l.rule]end;local function u(v,w,l,x)if w and w.msg then if type(w.msg)=="function"then return j(w.msg(l),l)end;return j(w.msg,l)end;if v and v._opts and v._opts.message then if type(v._opts.message)=="function"then return j(v._opts.message(l),l)end;return j(v._opts.message,l)end;local k=nil;local s=a and a._config and a._config.messages;if s then k=r(s,l)if type(k)=="table"then k=k[l.rule]or k[l.code]or nil end end;if not k and a then k=r(a._defaultMessages,l)if type(k)=="table"then k=k[l.rule]or k[l.code]or nil end end;k=k or x;if type(k)=="table"then k=l.rule and k[l.rule]or l.code and k[l.code]or"[Zood] Unknown error"end;if type(k)=="function"then k=k(l)end;return j(k,l)end;local function y(l)return{message=l.message,code=l.code or"validation",path=l.path or{},value=l.value,expected=l.expected,received=l.received,details=l.details}end;local function z(A)if not A then return""end;if type(A)=="table"then local m={}for e,i in ipairs(A)do if type(i)=="string"or type(i)=="number"then table.insert(m,tostring(i))end end;return table.concat(m,".")end;return tostring(A)end;local function B(C)return setmetatable({errors=C or{},format=function(self)local D={}for e,E in ipairs(self.errors)do local A=z(E.path)local F=A~=""and string.format("%s at '%s' (%s)",E.message,A,tostring(E.value))or string.format("%s (%s)",E.message,tostring(E.value))table.insert(D,F)end;return table.concat(D,"\n")end},{__tostring=function(self)return self:format()end})end;local G={}G.__index=G;function G:parse(H,I)local J,K=self:safeParse(H,I)if not J then error(K:format(),2)end;return K end;function G:safeParse(H,I)local J,L,M=self:_validate(H,I or{},{},{})if J then return true,L end;local D=B(M or{})return false,D end;function G:test(H,I)local J=self:_validate(H,I or{},{},{})return J end;function G:type()return self._type end;function G:isNullable()return self._nullable or false end;function G:isOptional()return self._optional or false end;function G:clone()local N=f(self)setmetatable(N,getmetatable(self))return N end;function G:nullable(I)local O=self:clone()O._nullable=true;O._nullableMsg=I and I.message;return O end;function G:optional(I)local O=self:clone()O._optional=true;O._optionalMsg=I and I.message;return O end;function G:default(P,I)local O=self:clone()O._default=P;O._defaultMsg=I and I.message;return O end;function G:catch(x,I)local O=self:clone()O._catch=x;O._catchMsg=I and I.message;return O end;function G:custom(Q,I)local O=self:clone()O._custom=Q;O._customMsg=I and I.message;return O end;function G:transform(Q,I)local O=self:clone()O._transform=Q;O._transformMsg=I and I.message;return O end;function a.string(I)local self=setmetatable({_type="string",_opts=I or{},_rules={}},G)return self end;function G:min(R,I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="min",arg=R,msg=I and I.message})return O end;function G:max(R,I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="max",arg=R,msg=I and I.message})return O end;function G:length(R,I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="length",arg=R,msg=I and I.message})return O end;function G:pattern(S,I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="pattern",arg=S,msg=I and I.message})return O end;function G:email(I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="email",msg=I and I.message})return O end;function G:url(I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="url",msg=I and I.message})return O end;function G:domain(I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="domain",msg=I and I.message})return O end;function G:uuid(I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="uuid",msg=I and I.message})return O end;function G:ip(I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="ip",msg=I and I.message})return O end;function G:trim(I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="trim",msg=I and I.message})return O end;function G:lower(I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="lower",msg=I and I.message})return O end;function G:upper(I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="upper",msg=I and I.message})return O end;function G:startsWith(T,I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="startsWith",arg=T,msg=I and I.message})return O end;function G:endsWith(U,I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="endsWith",arg=U,msg=I and I.message})return O end;function G:includes(V,I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="includes",arg=V,msg=I and I.message})return O end;function G:element(v,I)local O=self:clone()O._element=v;O._elementMsg=I and I.message;return O end;function G:unique(I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="unique",msg=I and I.message})return O end;function G:_validate(H,I,C,A)C=C or{}A=A or{}if self._type=="string"then if H==nil then if self._default~=nil then H=self._default end;if H==nil then if self._optional then return true,nil end;table.insert(C,y({message=u(self,nil,{code="required",schemaType="string",path=A,value=H},"Field is required"),code="required",path=A,value=H}))return false,nil,C end end;if self._nullable and H==nil then return true,nil end;if type(H)~="string"then table.insert(C,y({message=u(self,nil,{code="type",schemaType="string",path=A,value=H,received=type(H)},function(l)return string.format("Expected string, got %s",type(H))end),code="type",path=A,value=H}))return false,nil,C end;local i=H;for e,w in ipairs(self._rules)do if w.name=="min"and#i<w.arg then table.insert(C,y({message=u(self,w,{code="min",schemaType="string",rule="min",path=A,value=i,arg=w.arg},function(l)return string.format("String must be at least %d characters",w.arg)end),code="min",path=A,value=i}))return false,nil,C elseif w.name=="max"and#i>w.arg then table.insert(C,y({message=u(self,w,{code="max",schemaType="string",rule="max",path=A,value=i,arg=w.arg},function(l)return string.format("String must be at most %d characters",w.arg)end),code="max",path=A,value=i}))return false,nil,C elseif w.name=="length"and#i~=w.arg then table.insert(C,y({message=u(self,w,{code="length",schemaType="string",rule="length",path=A,value=i,arg=w.arg},function(l)return string.format("String must be exactly %d characters",w.arg)end),code="length",path=A,value=i}))return false,nil,C elseif w.name=="pattern"and not string.match(i,w.arg)then table.insert(C,y({message=u(self,w,{code="pattern",schemaType="string",rule="pattern",path=A,value=i,arg=w.arg},function(l)return string.format("String must match pattern: %s",w.arg)end),code="pattern",path=A,value=i}))return false,nil,C elseif w.name=="email"then if not string.match(i,a._patterns.email)then table.insert(C,y({message=u(self,w,{code="email",schemaType="string",rule="email",path=A,value=i},"Invalid email address"),code="email",path=A,value=i}))return false,nil,C end elseif w.name=="url"then if not string.match(i,a._patterns.url)then table.insert(C,y({message=u(self,w,{code="url",schemaType="string",rule="url",path=A,value=i},"Invalid URL format"),code="url",path=A,value=i}))return false,nil,C end elseif w.name=="domain"then if not string.match(i,a._patterns.domain)then table.insert(C,y({message=u(self,w,{code="domain",schemaType="string",rule="domain",path=A,value=i},"Invalid domain name"),code="domain",path=A,value=i}))return false,nil,C end elseif w.name=="ip"then if not string.match(i,a._patterns.ip)then table.insert(C,y({message=u(self,w,{code="ip",schemaType="string",rule="ip",path=A,value=i},"Invalid IP address"),code="ip",path=A,value=i}))return false,nil,C end elseif w.name=="uuid"then if not string.match(i,a._patterns.uuid)then table.insert(C,y({message=u(self,w,{code="uuid",schemaType="string",rule="uuid",path=A,value=i},"Invalid UUID format"),code="uuid",path=A,value=i}))return false,nil,C end elseif w.name=="datetime"then if not string.match(i,a._patterns.datetime)then table.insert(C,y({message=u(self,w,{code="datetime",schemaType="string",rule="datetime",path=A,value=i},"Invalid datetime format"),code="datetime",path=A,value=i}))return false,nil,C end elseif w.name=="date"then if not string.match(i,a._patterns.date)then table.insert(C,y({message=u(self,w,{code="date",schemaType="string",rule="date",path=A,value=i},"Invalid date format"),code="date",path=A,value=i}))return false,nil,C end elseif w.name=="time"then if not string.match(i,a._patterns.time)then table.insert(C,y({message=u(self,w,{code="time",schemaType="string",rule="time",path=A,value=i},"Invalid time format"),code="time",path=A,value=i}))return false,nil,C end elseif w.name=="trim"then i=i:match("^%s*(.-)%s*$")elseif w.name=="lower"then i=string.lower(i)elseif w.name=="upper"then i=string.upper(i)elseif w.name=="startsWith"and string.sub(i,1,#w.arg)~=w.arg then table.insert(C,y({message=u(self,w,{code="startsWith",schemaType="string",rule="startsWith",path=A,value=i,arg=w.arg},function(l)return string.format("Must start with '%s'",w.arg)end),code="startsWith",path=A,value=i}))return false,nil,C elseif w.name=="endsWith"and string.sub(i,-#w.arg)~=w.arg then table.insert(C,y({message=u(self,w,{code="endsWith",schemaType="string",rule="endsWith",path=A,value=i,arg=w.arg},function(l)return string.format("Must end with '%s'",w.arg)end),code="endsWith",path=A,value=i}))return false,nil,C elseif w.name=="includes"and not string.find(i,w.arg,1,true)then table.insert(C,y({message=u(self,w,{code="includes",schemaType="string",rule="includes",path=A,value=i,arg=w.arg},function(l)return string.format("Must contain '%s'",w.arg)end),code="includes",path=A,value=i}))return false,nil,C end end;if self._custom then local J,k=self._custom(i)if not J then table.insert(C,y({message=u(self,nil,{code="custom",schemaType="string",path=A,value=i},k or"Custom validation failed"),code="custom",path=A,value=i}))return false,nil,C end end;if self._transform then i=self._transform(i)end;return true,i,C elseif self._type=="number"then if H==nil then if self._default~=nil then H=self._default end;if H==nil then if self._optional then return true,nil end;table.insert(C,y({message=u(self,nil,{code="required",schemaType="number",path=A,value=H},"Field is required"),code="required",path=A,value=H}))return false,nil,C end end;if self._nullable and H==nil then return true,nil end;if type(H)~="number"then table.insert(C,y({message=u(self,nil,{code="type",schemaType="number",path=A,value=H,received=type(H)},function(l)return string.format("Expected number, got %s",type(H))end),code="type",path=A,value=H}))return false,nil,C end;local i=H;for e,w in ipairs(self._rules)do if w.name=="min"and i<w.arg then table.insert(C,y({message=u(self,w,{code="min",schemaType="number",rule="min",path=A,value=i,arg=w.arg},function(l)return string.format("Number must be at least %d",w.arg)end),code="min",path=A,value=i}))return false,nil,C elseif w.name=="max"and i>w.arg then table.insert(C,y({message=u(self,w,{code="max",schemaType="number",rule="max",path=A,value=i,arg=w.arg},function(l)return string.format("Number must be at most %d",w.arg)end),code="max",path=A,value=i}))return false,nil,C elseif w.name=="positive"and i<=0 then table.insert(C,y({message=u(self,w,{code="positive",schemaType="number",rule="positive",path=A,value=i},"Number must be positive"),code="positive",path=A,value=i}))return false,nil,C elseif w.name=="negative"and i>=0 then table.insert(C,y({message=u(self,w,{code="negative",schemaType="number",rule="negative",path=A,value=i},"Number must be negative"),code="negative",path=A,value=i}))return false,nil,C elseif w.name=="integer"and i%1~=0 then table.insert(C,y({message=u(self,w,{code="integer",schemaType="number",rule="integer",path=A,value=i},"Number must be an integer"),code="integer",path=A,value=i}))return false,nil,C elseif w.name=="between"and(i<w.arg[1]or i>w.arg[2])then table.insert(C,y({message=u(self,w,{code="between",schemaType="number",rule="between",path=A,value=i,arg=w.arg},function(l)return string.format("Number must be between %d and %d",w.arg[1],w.arg[2])end),code="between",path=A,value=i}))return false,nil,C elseif w.name=="multipleOf"and i%w.arg~=0 then table.insert(C,y({message=u(self,w,{code="multipleOf",schemaType="number",rule="multipleOf",path=A,value=i,arg=w.arg},function(l)return string.format("Number must be a multiple of %d",w.arg)end),code="multipleOf",path=A,value=i}))return false,nil,C end end;if self._custom then local J,k=self._custom(i)if not J then table.insert(C,y({message=u(self,nil,{code="custom",schemaType="number",path=A,value=i},k or"Custom validation failed"),code="custom",path=A,value=i}))return false,nil,C end end;if self._transform then i=self._transform(i)end;return true,i,C elseif self._type=="boolean"then if H==nil then if self._default~=nil then H=self._default end;if H==nil then if self._optional then return true,nil end;table.insert(C,y({message=u(self,nil,{code="required",schemaType="boolean",path=A,value=H},"Field is required"),code="required",path=A,value=H}))return false,nil,C end end;if self._nullable and H==nil then return true,nil end;if type(H)~="boolean"then table.insert(C,y({message=u(self,nil,{code="type",schemaType="boolean",path=A,value=H,received=type(H)},function(l)return string.format("Expected boolean, got %s",type(H))end),code="type",path=A,value=H}))return false,nil,C end;local i=H;if self._custom then local J,k=self._custom(i)if not J then table.insert(C,y({message=u(self,nil,{code="custom",schemaType="boolean",path=A,value=i},k or"Custom validation failed"),code="custom",path=A,value=i}))return false,nil,C end end;if self._transform then i=self._transform(i)end;return true,i,C elseif self._type=="any"then if H==nil and self._default~=nil then H=self._default end;if self._nullable and H==nil then return true,nil end;local i=H;if self._custom then local J,k=self._custom(i)if not J then table.insert(C,y({message=u(self,nil,{code="custom",schemaType="any",path=A,value=i},k or"Custom validation failed"),code="custom",path=A,value=i}))return false,nil,C end end;if self._transform then i=self._transform(i)end;return true,i,C elseif self._type=="table"then if H==nil then if self._default~=nil then H=self._default end;if H==nil then if self._optional then return true,nil end;table.insert(C,y({message=u(self,nil,{code="required",schemaType="table",path=A,value=H},"Field is required"),code="required",path=A,value=H}))return false,nil,C end end;if self._nullable and H==nil then return true,nil end;if type(H)~="table"then table.insert(C,y({message=u(self,nil,{code="type",schemaType="table",path=A,value=H,received=type(H)},function(l)return string.format("Expected table, got %s",type(H))end),code="type",path=A,value=H}))return false,nil,C end;local D={}for h,v in pairs(self._shape)do if v._when then local W=v._when.cases[H[v._when.field]]if W then local J,i=W:_validate(H[h],I,C,{table.unpack(A or{}),h})if not J then return false,nil,C end;D[h]=i else table.insert(C,y({message=u(self,nil,{code="when",schemaType="table",path=A,value=H},"Invalid case for 'when'"),code="when",path=A,value=H}))return false,nil,C end else local J,i=v:_validate(H[h],I,C,{table.unpack(A or{}),h})if not J then return false,nil,C end;D[h]=i end end;if self._mode=="strict"then for h in pairs(H)do if not self._shape[h]then table.insert(C,y({message=u(self,nil,{code="unknownKey",schemaType="table",path=A,value=h},function(l)return string.format("Unexpected field: %s",tostring(h))end),code="unknownKey",path=A,value=h}))return false,nil,C end end elseif self._mode=="strip"then elseif self._mode=="loose"then for h,i in pairs(H)do if not self._shape[h]then D[h]=i end end end;if self._custom then local J,k=self._custom(D)if not J then table.insert(C,y({message=u(self,nil,{code="custom",schemaType="table",path=A,value=D},k or"Custom validation failed"),code="custom",path=A,value=D}))return false,nil,C end end;if self._transform then D=self._transform(D)end;return true,D,C elseif self._type=="array"then if H==nil then if self._default~=nil then H=self._default end;if H==nil then if self._optional then return true,nil end;table.insert(C,y({message=u(self,nil,{code="required",schemaType="array",path=A,value=H},"Array is required"),code="required",path=A,value=H}))return false,nil,C end end;if self._nullable and H==nil then return true,nil end;if type(H)~="table"or not b(H)then table.insert(C,y({message=u(self,nil,{code="type",schemaType="array",path=A,value=H,received=type(H)},function(l)return string.format("Expected array, got %s",type(H))end),code="type",path=A,value=H}))return false,nil,C end;local D={}for d,i in ipairs(H)do local J,K=self._element:_validate(i,I,C,{table.unpack(A or{}),d})if not J then return false,nil,C end;D[d]=K end;for e,w in ipairs(self._rules)do if w.name=="min"and#D<w.arg then table.insert(C,y({message=u(self,w,{code="min",schemaType="array",rule="min",path=A,value=D,arg=w.arg},function(l)return string.format("Array must contain at least %d items",w.arg)end),code="min",path=A,value=D}))return false,nil,C elseif w.name=="max"and#D>w.arg then table.insert(C,y({message=u(self,w,{code="max",schemaType="array",rule="max",path=A,value=D,arg=w.arg},function(l)return string.format("Array must contain at most %d items",w.arg)end),code="max",path=A,value=D}))return false,nil,C elseif w.name=="length"and#D~=w.arg then table.insert(C,y({message=u(self,w,{code="length",schemaType="array",rule="length",path=A,value=D,arg=w.arg},function(l)return string.format("Array must contain exactly %d items",w.arg)end),code="length",path=A,value=D}))return false,nil,C elseif w.name=="unique"then local X={}for e,i in ipairs(D)do if X[i]then table.insert(C,y({message=u(self,w,{code="unique",schemaType="array",rule="unique",path=A,value=D},"Array items must be unique"),code="unique",path=A,value=D}))return false,nil,C end;X[i]=true end end end;if self._custom then local J,k=self._custom(D)if not J then table.insert(C,y({message=u(self,nil,{code="custom",schemaType="array",path=A,value=D},k or"Custom validation failed"),code="custom",path=A,value=D}))return false,nil,C end end;if self._transform then D=self._transform(D)end;return true,D,C elseif self._type=="enum"then if H==nil then if self._default~=nil then H=self._default end;if H==nil then if self._optional then return true,nil end;table.insert(C,y({message=u(self,nil,{code="required",schemaType="enum",path=A,value=H},"Enum value is required"),code="required",path=A,value=H}))return false,nil,C end end;if self._nullable and H==nil then return true,nil end;if not self._lookup[H]then table.insert(C,y({message=u(self,nil,{code="invalid",schemaType="enum",path=A,value=H,expected=self._values},function(l)return string.format("Invalid enum value. Expected one of: %s",table.concat(self._values,", "))end),code="invalid",path=A,value=H}))return false,nil,C end;return true,H,C elseif self._type=="literal"then if H==nil then if self._default~=nil then H=self._default end;if H==nil then if self._optional then return true,nil end;table.insert(C,y({message=u(self,nil,{code="required",schemaType="literal",path=A,value=H},"Literal value is required"),code="required",path=A,value=H}))return false,nil,C end end;if self._nullable and H==nil then return true,nil end;if H~=self._literal then table.insert(C,y({message=u(self,nil,{code="invalid",schemaType="literal",path=A,value=H,expected=self._literal},function(l)return string.format("Expected literal value: %s",tostring(self._literal))end),code="invalid",path=A,value=H}))return false,nil,C end;return true,H,C elseif self._type=="peripheral"then if H==nil then if self._default~=nil then H=self._default end;if H==nil then if self._optional then return true,nil end;table.insert(C,y({message=u(self,nil,{code="required",schemaType="peripheral",path=A,value=H},"Peripheral is required"),code="required",path=A,value=H}))return false,nil,C end end;if self._nullable and H==nil then return true,nil end;if type(H)~="string"then table.insert(C,y({message=u(self,nil,{code="type",schemaType="peripheral",path=A,value=H,received=type(H)},function(l)return string.format("Expected peripheral name, got %s",type(H))end),code="type",path=A,value=H}))return false,nil,C end;if not peripheral then table.insert(C,y({message=u(self,nil,{code="notFound",schemaType="peripheral",path=A,value=H},"Peripheral API not available"),code="notFound",path=A,value=H}))return false,nil,C end;local Y=peripheral.wrap(H)if not Y then table.insert(C,y({message=u(self,nil,{code="notFound",schemaType="peripheral",path=A,value=H},function(l)return string.format("Peripheral not found: %s",H)end),code="notFound",path=A,value=H}))return false,nil,C end;if self._peripheralType and peripheral.getType then local g=peripheral.getType(H)if g~=self._peripheralType then table.insert(C,y({message=u(self,nil,{code="wrongType",schemaType="peripheral",path=A,value=H,expected=self._peripheralType,received=g},function(l)return string.format("Expected %s, got %s",self._peripheralType,g or"unknown")end),code="wrongType",path=A,value=H}))return false,nil,C end end;return true,H,C elseif self._type=="color"then if H==nil then if self._default~=nil then H=self._default end;if H==nil then if self._optional then return true,nil end;table.insert(C,y({message=u(self,nil,{code="required",schemaType="color",path=A,value=H},"Color is required"),code="required",path=A,value=H}))return false,nil,C end end;if self._nullable and H==nil then return true,nil end;if type(H)~="number"then table.insert(C,y({message=u(self,nil,{code="type",schemaType="color",path=A,value=H,received=type(H)},function(l)return string.format("Expected color value, got %s",type(H))end),code="type",path=A,value=H}))return false,nil,C end;if H<0 or H>0xFFFFFF then table.insert(C,y({message=u(self,nil,{code="outOfRange",schemaType="color",path=A,value=H},function(l)return string.format("Color value out of range: %s",tostring(H))end),code="outOfRange",path=A,value=H}))return false,nil,C end;return true,H,C elseif self._type=="side"then local Z={top=true,bottom=true,left=true,right=true,front=true,back=true}if H==nil then if self._default~=nil then H=self._default end;if H==nil then if self._optional then return true,nil end;table.insert(C,y({message=u(self,nil,{code="required",schemaType="side",path=A,value=H},"Side is required"),code="required",path=A,value=H}))return false,nil,C end end;if self._nullable and H==nil then return true,nil end;if type(H)~="string"or not Z[H]then table.insert(C,y({message=u(self,nil,{code="invalid",schemaType="side",path=A,value=H},function(l)return string.format("Invalid side value: %s",tostring(H))end),code="invalid",path=A,value=H}))return false,nil,C end;return true,H,C end end;function a.number(I)local self=setmetatable({_type="number",_opts=I or{},_rules={}},G)return self end;function G:positive(I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="positive",msg=I and I.message})return O end;function G:negative(I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="negative",msg=I and I.message})return O end;function G:integer(I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="integer",msg=I and I.message})return O end;function G:between(_,a0,I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="between",arg={_,a0},msg=I and I.message})return O end;function G:multipleOf(R,I)local O=self:clone()O._rules=f(self._rules)table.insert(O._rules,{name="multipleOf",arg=R,msg=I and I.message})return O end;function a.boolean(I)local self=setmetatable({_type="boolean",_opts=I or{},_rules={}},G)return self end;function a.any(I)local self=setmetatable({_type="any",_opts=I or{},_rules={}},G)return self end;function a.table(a1,I)local self=setmetatable({_type="table",_opts=I or{},_shape=a1 or{},_rules={},_mode="strip"},G)return self end;function G:strict(I)local O=self:clone()O._mode="strict"O._strictMsg=I and I.message;return O end;function G:loose(I)local O=self:clone()O._mode="loose"O._looseMsg=I and I.message;return O end;function a.array(a2,I)local self=setmetatable({_type="array",_opts=I or{},_element=a2,_rules={}},G)return self end;function a.enum(a3,I)local a4={}for e,i in ipairs(a3)do a4[i]=true end;local self=setmetatable({_type="enum",_opts=I or{},_values=a3,_lookup=a4},G)return self end;function a.literal(a5,I)local self=setmetatable({_type="literal",_opts=I or{},_literal=a5},G)return self end;function a.peripheral(a6,I)local self=setmetatable({_type="peripheral",_opts=I or{},_peripheralType=a6},G)return self end;function a.color(I)local self=setmetatable({_type="color",_opts=I or{}},G)return self end;function a.side(I)local self=setmetatable({_type="side",_opts=I or{}},G)return self end;function a.function_(I)local self=setmetatable({_type="function",_opts=I or{}},G)function self:_validate(H,I,C,A)if type(H)~="function"then table.insert(C,y({message=self._opts.message or string.format("Expected function, got %s",type(H)),code="type",path=A,value=H}))return false,nil,C end;return true,H,C end;return self end;a["function"]=a.function_;function a.custom(Q,I)local self=setmetatable({_type="custom",_fn=Q,_opts=I or{}},G)function self:_validate(H,I,C,A)local J,k=self._fn(H,{path=A})if not J then table.insert(C,y({message=self._opts.message or k or"Custom validation failed",code="custom",path=A,value=H}))return false,nil,C end;return true,H,C end;return self end;function a.lazy(Q)local v;local self=setmetatable({_type="lazy"},G)function self:_validate(H,I,C,A)v=v or Q()return v:_validate(H,I,C,A)end;return self end;function G:pick(a7,I)local a1={}for h in pairs(a7)do if self._shape and self._shape[h]then a1[h]=self._shape[h]end end;return a.table(a1,I)end;function G:omit(a7,I)local a1={}for h,i in pairs(self._shape or{})do if not a7[h]then a1[h]=i end end;return a.table(a1,I)end;function G:partial(I)local a1={}for h,i in pairs(self._shape or{})do a1[h]=i:optional()end;return a.table(a1,I)end;function G:required(I)local a1={}for h,i in pairs(self._shape or{})do local a8=f(i)a8._optional=false;a1[h]=setmetatable(a8,getmetatable(i))end;return a.table(a1,I)end;function G:extend(a7,I)local a1=f(self._shape or{})for h,i in pairs(a7)do a1[h]=i end;return a.table(a1,I)end;function a.merge(a9,aa,I)local a1=f(a9._shape or{})for h,i in pairs(aa._shape or{})do a1[h]=i end;return a.table(a1,I)end;function a.intersection(ab,I)local self=setmetatable({_type="intersection",_schemas=ab,_opts=I or{}},G)function self:_validate(H,I,C,A)local D={}for e,v in ipairs(self._schemas)do local J,i=v:_validate(H,I,C,A)if not J then return false,nil,C end;if type(i)=="table"then for h,ac in pairs(i)do D[h]=ac end else D=i end end;return true,D,C end;return self end;function a.discriminatedUnion(ad,ab,I)local self=setmetatable({_type="discriminatedUnion",_discriminator=ad,_schemas=ab,_opts=I or{}},G)function self:_validate(H,I,C,A)if type(H)~="table"then table.insert(C,y({message=self._opts.message or"Expected table for discriminated union",code="type",path=A,value=H}))return false,nil,C end;local ae=H[self._discriminator]for e,v in ipairs(self._schemas)do if v._shape and v._shape[self._discriminator]and v._shape[self._discriminator]._literal==ae then return v:_validate(H,I,C,A)end end;table.insert(C,y({message=self._opts.discriminatorMessage or"Invalid discriminator value",code="discriminator",path=A,value=ae}))return false,nil,C end;return self end;function G:when(af,ag,I)local O=self:clone()O._when={field=af,cases=ag,opts=I}return O end;function G:parseAsync(H)local J,K=self:safeParse(H)return{andThen=function(e,ah)if J then ah(K)end;return e end}end;function G:customAsync(Q,I)return self:custom(Q,I)end;function G:getRules()return self._rules or{}end;function a.exportSchema(v)return{type=v:type(),rules=v:getRules(),isOptional=v:isOptional(),isNullable=v:isNullable()}end;function a.importSchema(P)local v=a[P.type]()if P.isOptional then v=v:optional()end;if P.isNullable then v=v:nullable()end;for e,w in ipairs(P.rules)do v=v[w.name](v,table.unpack(w.args or{w.arg}))end;return v end;function a.configure(ai)local aj=a._config or{}for h,i in pairs(ai)do aj[h]=i end;a._config=aj end;function a.debugSchema(v,H)local ak,L=v:safeParse(H)print("Schema Debug Info:")print("Type:",v:type())print("Is Optional:",v:isOptional())print("Is Nullable:",v:isNullable())if not ak then print("\nValidation Errors:")for e,error in ipairs(L.errors)do print(string.format("- Path: %s\n  Message: %s\n  Code: %s",table.concat(error.path or{},"."),error.message,error.code))end end;return ak,L end;a._metrics={counts={},times={},errors={}}function a.trackValidation(al,Q)local am=os.epoch and os.epoch("utc")or os.clock()*1000;local ak,L=pcall(Q)local an=os.epoch and os.epoch("utc")or os.clock()*1000;a._metrics.counts[al]=(a._metrics.counts[al]or 0)+1;a._metrics.times[al]=(a._metrics.times[al]or 0)+an-am;if not ak then a._metrics.errors[al]=(a._metrics.errors[al]or 0)+1 end;return ak,L end;a.EventEmitter={listeners={},on=function(self,ao,v,ap)self.listeners[ao]={schema=v,handler=ap}end,emit=function(self,ao,aq)local ar=self.listeners[ao]if ar then local ak,L=ar.schema:safeParse(aq)if ak then ar.handler(L)else print("Invalid event data:",L:format())end end end}a.StateManager={schemas={},state={},define=function(self,as,v)self.schemas[as]=v end,setState=function(self,as,H)local v=self.schemas[as]if v then local ak,L=v:safeParse(H)if ak then self.state[as]=L;return true end;return false,L:format()end;return false,"No schema defined for key: "..as end}a.coerce={string=function(I)return a.custom(function(H)if type(H)=="string"then return true,H end;if H==nil then return false,"Cannot coerce nil to string"end;return true,tostring(H)end,I)end,number=function(I)return a.custom(function(H)if type(H)=="number"then return true,H end;local R=tonumber(H)if R then return true,R end;return false,"Could not convert to number"end,I)end,boolean=function(I)return a.custom(function(H)if type(H)=="boolean"then return true,H end;local at,au;if a._config and a._config.coerce and a._config.coerce.boolean then at=a._config.coerce.boolean.truthy or{"true","1","yes","y","on","enabled"}au=a._config.coerce.boolean.falsy or{"false","0","no","n","off","disabled"}else at={"true","1"}au={"false","0"}end;if H==1 or H==true then return true,true end;if H==0 or H==false then return true,false end;if type(H)=="string"then for e,g in ipairs(at)do if H==g then return true,true end end;for e,av in ipairs(au)do if H==av then return true,false end end end;return false,u(nil,nil,{code="boolean",schemaType="coerce",value=H},"Could not convert to boolean")end,I)end}return a
